service: instagram-image-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1
  environment:
    IMAGES_TABLE: ${self:service}-images-${sls:stage}
    S3_BUCKET: ${self:service}-files-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:HeadObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET}"
            - "arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*"

plugins:
  - serverless-localstack
  - serverless-python-requirements

custom:
  localstack:
    stages: [local]
    endpointFile: localstack-endpoints.json
    debug: true
  pythonRequirements:
    dockerizePip: true

functions:
  
  # Image API functions
  imageUpload:
    handler: app.image_handler.upload_image_handler
    events:
      - http:
          path: images/upload
          method: post
  
  getImages:
    handler: app.image_handler.get_images
    events:
      - http:
          path: images
          method: get
  
  getImage:
    handler: app.image_handler.get_image
    events:
      - http:
          path: images/{id}
          method: get
  
  updateImageMetadata:
    handler: app.image_handler.update_image_metadata
    events:
      - http:
          path: images/{id}
          method: put
  
  deleteImage:
    handler: app.image_handler.delete_image
    events:
      - http:
          path: images/{id}
          method: delete
  
  s3FileProcessor:
    handler: app.s3_handler.process_s3_event
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          existing: false

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IMAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        
    FilesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              AllowedOrigins:
                - "*"
              MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: s3:ObjectCreated:*
              Function: !GetAtt S3FileProcessorLambdaFunction.Arn
              
    S3InvokeLambdaPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName: !GetAtt S3FileProcessorLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: s3.amazonaws.com
        SourceArn: !GetAtt FilesBucket.Arn